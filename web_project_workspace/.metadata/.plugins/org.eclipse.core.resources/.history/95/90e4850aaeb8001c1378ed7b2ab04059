package com.example.demo.controller;

import java.util.List;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.demo.dto.ResponseDTO;
import com.example.demo.dto.ShoppingDTO;
import com.example.demo.model.ShoppingEntity;
import com.example.demo.service.ShoppingService;

@RestController
@RequestMapping("shopping")
public class ShoppingController {
	
	@Autowired
	private ShoppingService service;
	
	@PostMapping
	public ResponseEntity<?> createTodo(@RequestBody ShoppingDTO dto) {
		try {
			String temporaryUserId = "Sang Hee Park";
			
			// (1)
			ShoppingEntity entity = ShoppingDTO.toEntity(dto);
			
			// (2) 
			entity.setId(null);
			
			// (3) 
			entity.setUserId(temporaryUserId);
			
			// (4) 
			List<ShoppingEntity> entities = service.create(entity);
			
			// (5) 
			List<ShoppingDTO> dtos = entities.stream().map(ShoppingDTO::new).collect(Collectors.toList());
			
			// (6) 
			ResponseDTO<ShoppingDTO> response = ResponseDTO.<ShoppingDTO>builder().data(dtos).build();
			
			// (7) 
			return ResponseEntity.ok().body(response);			
		} catch(Exception e) {
			// (8) 
			String error = e.getMessage();
			ResponseDTO<ShoppingDTO> response = ResponseDTO.<ShoppingDTO>builder().error(error).build();
			return ResponseEntity.badRequest().body(response);
		}
	}
	
	@GetMapping
	public ResponseEntity<?> retrieveTodoList() {
		String temporaryUserId = "Sang Hee Park";
		String title = 		
		// (1)
//		List<ShoppingEntity> entities = service.retrieve(temporaryUserId);
		List<ShoppingEntity> entities = service.retrieve(title);
		
		// (2)
		List<ShoppingDTO> dtos = entities.stream().map((e)->(new ShoppingDTO(e))).collect(Collectors.toList());
		
		// (3)
		ResponseDTO<ShoppingDTO> response = ResponseDTO.<ShoppingDTO>builder().data(dtos).build();
		
		// (4)
		return ResponseEntity.ok().body(response);
	}
}
